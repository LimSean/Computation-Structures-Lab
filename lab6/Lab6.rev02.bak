.include "/nominal.jsim"
.include "/stdcell.jsim"
.include "/lab6checkoff.jsim"

*<====================>32bit ALU<==========================>*
.subckt FA a b ci s co

Xxor1 a b p1 xor2
Xxor2 p1 ci s xor2

Xnand1 a b p2 nand2
Xnand2 p1 ci p3 nand2
Xnand3 p2 p3 co nand2
.ends


.subckt overflowcheck a b s v 
Xsinv s si inverter
XAinv a ai inverter
XBinv b bi inverter

X1 a b si x1 and3
X2 ai bi s x2 and3
X3 x1 x2 v or2
.ends 


.subckt adder32 ALUFN[0] A[31:0] B[31:0] s[31:0] z v n

Xxor B[31:0] ALUFN[0]#32 nB[31:0] xor2

XAdder0 A[0] nB[0] ALUFN[0] s[0] co[0] FA
XAdder1to31 A[31:1] nB[31:1] co[30:0] s[31:1] co[31:1] FA

Xz1 s[0:7] s[8:15] s[16:23] s[24:31] z1[0:7] nor4
Xz2 z1[0:1] z1[2:3] z1[4:5] z1[6:7] z2[0:1] and4
Xz3 z2[0] z2[1] z and2


Xv A[31] nB[31] s[31] v overflowcheck

.connect s[31] n
.ends



.subckt compare32 ALUFN[2:1] z v n cmp[31:0]
XAltB n v LSB1 xor2
XAlteqB LSB1 z LSB2 or2
.connect cmp[31:1] 0
.connect d0 0
Xcmp32 ALUFN[1] ALUFN[2] d0 z LSB1 LSB2 cmp[0] mux4

.ends

.subckt boole32 ALUFN[3:0] A[31:0] B[31:0] boole[31:0]
Xmx4 A[31:0] B[31:0] ALUFN[0]#32 ALUFN[1]#32 ALUFN[2]#32 ALUFN[3]#32 boole[31:0] mux4

.ends



.subckt shift32 ALUFN[1:0] A[31:0] B[4:0] shift[31:0]

.connect gnd 0
XASRcombine A[31] ALUFN[1] Arith2 nand2
XASRcombineinv Arith2 Arith inverter

XB4 B[4]#32 ALUFN[0]#32 A[31:0]  A[15:0] gnd#16 A[31:0] Arith#16 A[31:16] W[31:0] mux4
XB3 B[3]#32 ALUFN[0]#32 W[31:0]  W[23:0] gnd#8  W[31:0] Arith#8  W[31:8]  X[31:0] mux4
XB2 B[2]#32 ALUFN[0]#32 X[31:0]  X[27:0] gnd#4  X[31:0] Arith#4  X[31:4]  Y[31:0] mux4
XB1 B[1]#32 ALUFN[0]#32 Y[31:0]  Y[29:0] gnd#2  Y[31:0] Arith#2  Y[31:2]  Z[31:0] mux4
XB0 B[0]#32 ALUFN[0]#32 Z[31:0]  Z[30:0] gnd#1  Z[31:0] Arith#1  Z[31:1]  shift[31:0] mux4


.ends


.subckt alu ALUFN[5:0] A[31:0] B[31:0] alu[31:0] z v n
Xadd ALUFN[0] A[31:0] B[31:0] aalu[31:0] z v n  adder32
Xcompare ALUFN[2:1] z v n calu[31:0] compare32
Xboole ALUFN[3:0] A[31:0] B[31:0] balu[31:0] boole32 
Xshift ALUFN[1:0] A[31:0] B[4:0] salu[31:0] shift32

Xcombine ALUFN[4]#32 ALUFN[5]#32 aalu[31:0] balu[31:0] salu[31:0] calu[31:0] alu[31:0]  mux4
.ends




*<=========================>Program Counter<=========================>
.subckt pc clk reset pcsel[2:0] xadr[31:0] illop[31:0] jt[31:0] c[31:0] ia[31:0] addconst[31:0] PCaddFour[31:0]

*Registers with clock
Xreg d[31:0] clk#32 ia[31:0] dreg    

*JMP instr leave bit31 unchanged
Xjmp jt[31] ia[31] jmppc31 and2   

*PC + 4
XPCaddFour1 ia[0] 0 0 PCaddFour[0] co[0] FA
XPCaddFour2 ia[1] 0 co[0] PCaddFour[1] co[1] FA
XPCaddFour3 ia[2] vdd co[1] PCaddFour[2] co[2] FA
XPCaddFour4 ia[31:3] 0#29 co[30:2] PCaddFour[31:3] co[31:3] FA

*(PC+4) + (C<<2)
Xaddconst1 PCaddFour[0] 0 0 addconst[0] cotemp[0] FA
Xaddconst2 PCaddFour[1] 0 cotemp[0] addconst[1] cotemp[1] FA
Xaddconst3 PCaddFour[31:2] c[29:0] cotemp[30:1] addconst[31:2] cotemp[31:2] FA

*PCSEL
Xpcsel1 pcsel[0]#32 pcsel[1]#32 PCaddFour[31:0] ia[31] addconst[30:0] jmppc31 jt[30:2] 0#2 illop[31:0] nextmux[31:0] mux4
Xpcsel2 pcsel[2]#32 nextmux[31:0] xadr[31:0] out[31:0] mux2


*RESET to 0x80000000
Xrst reset#32 out[31:0] vdd 0#31 d[31:0] mux2   
            
.ends



*<=============================>Register File<===============================>
.subckt regfile clk werf ra2sel ra[4:0] rb[4:0] rc[4:0] wdata[31:0] radata[31:0] rbdata[31:0] wasel

*WASEL
XWASEL wasel#5 rc[4:0] vdd#4 0 wa[4:0] mux2

*RA2SEL selects right B read port addrs
XRA2SEL ra2sel#5 rb[4:0] rc[4:0] ra2mux[4:0] mux2   

*if is R31
Xr31A1 ra[3] ra[2] ra[1] ra[0] temp1 and4
Xr31B1 ra2mux[3] ra2mux[2] ra2mux[1] ra2mux[0] temp2 and4
Xr31A2 ra[4] temp1 r31a and2
Xr31B2 ra2mux[4] temp2 r31b and2

*Forces R31 to 0
XAdata r31a#32 adata[31:0] 0#32 radata[31:0] mux2   
XBdata r31b#32 bdata[31:0] 0#32 rbdata[31:0] mux2 


Xregfile 
+ vdd 0 0 ra[4:0] adata[31:0]      // A read port
+ vdd 0 0 ra2mux[4:0] bdata[31:0]  // B read port 
+ 0 clk werf wa[4:0] wdata[31:0]   // write port 
+ $memory width=32 nlocations=31

  
.ends



*<================================>Control Logic<==========================>
.subckt ctl reset z id[31:26] ra2sel bsel alufn[5:0] wdsel[1:0] werf moe wr pcsel[2:0] wasel asel

*RESET 
Xrst reset xwr 0 wr mux2   

*BNE,BEQ pcsel selector, z 
Xinv id[31] temp1 inverter
Xand4 temp1 id[30] id[29] id[28] temp2 and4
Xxor2 id[27] id[26] temp3 xor2
Xxnor2 id[26] z temp4 xnor2
Xtemp temp2 temp3 temp4 vdd br and4
Xpcsel br#3 xpcsel[2:0] 0#2 vdd pcsel[2:0] mux2


Xctl vdd 0 0 id[31:26] // one read port
+ xpcsel[2:0] wasel asel ra2sel bsel alufn[5:0] wdsel[1:0] werf moe xwr
+ $memory width=18 nlocations=64 contents=(
+ 0b011100000000000100 // opcode=0b000000
+ 0b011100000000000100 // opcode=0b000001
+ 0b011100000000000100 // opcode=0b000010
+ 0b011100000000000100 // opcode=0b000011
+ 0b011100000000000100 // opcode=0b000100
+ 0b011100000000000100 // opcode=0b000101
+ 0b011100000000000100 // opcode=0b000110
+ 0b011100000000000100 // opcode=0b000111
+ 0b011100000000000100 // opcode=0b001000
+ 0b011100000000000100 // opcode=0b001001
+ 0b011100000000000100 // opcode=0b001010
+ 0b011100000000000100 // opcode=0b001011
+ 0b011100000000000100 // opcode=0b001100
+ 0b011100000000000100 // opcode=0b001101
+ 0b011100000000000100 // opcode=0b001110
+ 0b011100000000000100 // opcode=0b001111
+ 0b011100000000000100 // opcode=0b010000
+ 0b011100000000000100 // opcode=0b010001
+ 0b011100000000000100 // opcode=0b010010
+ 0b011100000000000100 // opcode=0b010011
+ 0b011100000000000100 // opcode=0b010100
+ 0b011100000000000100 // opcode=0b010101
+ 0b011100000000000100 // opcode=0b010110
+ 0b011100000000000100 // opcode=0b010111
+ 0b000000100000010110 // opcode=0b011000  LD
+ 0b000001100000000001 // opcode=0b011001  ST
+ 0b011100000000000100 // opcode=0b011010
+ 0b010000000000000100 // opcode=0b011011  JMP
+ 0b011100000000000100 // opcode=0b011100
+ 0b000000000000000100 // opcode=0b011101  BEQ
+ 0b000000000000000100 // opcode=0b011110  BNE
+ 0b000010001101010110 // opcode=0b011111  LDR
+ 0b000000000000001100 // opcode=0b100000  ADD
+ 0b000000000000101100 // opcode=0b100001  SUB
+ 0b011100000000000100 // opcode=0b100010
+ 0b011100000000000100 // opcode=0b100011
+ 0b000000011001101100 // opcode=0b100100  CMPEQ
+ 0b000000011010101100 // opcode=0b100101  CMPLT
+ 0b000000011011101100 // opcode=0b100110  CMPLE
+ 0b011100000000000100 // opcode=0b100111
+ 0b000000001100001100 // opcode=0b101000  AND
+ 0b000000001111001100 // opcode=0b101001  OR
+ 0b000000001011001100 // opcode=0b101010  XOR
+ 0b011100000000000100 // opcode=0b101011
+ 0b000000010000001100 // opcode=0b101100  SHL
+ 0b000000010000101100 // opcode=0b101101  SHR
+ 0b000000010001101100 // opcode=0b101110  SRA
+ 0b011100000000000100 // opcode=0b101111
+ 0b000000100000001100 // opcode=0b110000  ADDC
+ 0b000000100000101100 // opcode=0b110001  SUBC
+ 0b011100000000000100 // opcode=0b110010
+ 0b011100000000000100 // opcode=0b110011
+ 0b000000111001101100 // opcode=0b110100  CMPEQC
+ 0b000000111010101100 // opcode=0b110101  CMPLTC
+ 0b000000111011101100 // opcode=0b110110  CMPLEC
+ 0b011100000000000100 // opcode=0b110111
+ 0b000000101100001100 // opcode=0b111000  ANDC
+ 0b000000101111001100 // opcode=0b111001  ORC
+ 0b000000101011001100 // opcode=0b111010  XORC
+ 0b011100000000000100 // opcode=0b111011
+ 0b000000110000001100 // opcode=0b111100  SHLC
+ 0b000000110000101100 // opcode=0b111101  SHRC
+ 0b000000110001101100 // opcode=0b111110  SRAC
+ 0b011100000000000100 // opcode=0b111111
+ )



.ends





*<===========================>BETA ARCHITECTURE<=================================>
.subckt beta clk reset irq ia[31:0] id[31:0] ma[31:0]
+ moe mrd[31:0] wr mwd[31:0]

*Connect PC, Regfile, Control Logic, ALU
Xpc clk reset pcsel[2:0] xadr[31:0] illop[31:0] radata[31:0] csext[31:0] ia[31:0] addconst[31:0] PCaddFour[31:0] pc
Xregfile clk werf ra2sel id[20:16] id[15:11] id[25:21] wdata[31:0] radata[31:0] rbdata[31:0] wasel regfile
Xctl reset z id[31:26] ra2sel bsel alufn[5:0] xwdsel[1:0] xwerf moe xwr xpcsel[2:0] xwasel asel ctl
Xalu alufn[5:0] adata[31:0] bdata[31:0] ma[31:0] z1 v1 n1 alu   

*Connect ASEL, BSEL, WDSEL
Xasel asel#32 radata[31:0] 0 addconst[30:0] adata[31:0] mux2
Xbsel bsel#32 rbdata[31:0] csext[31:0] bdata[31:0] mux2
Xwdsel wdsel[0]#32 wdsel[1]#32 ia[31] PCaddFour[30:0] ma[31:0] mrd[31:0] 0#32 wdata[31:0] mux4

*Mem[0x80000004] = BR(illop_handler)
Xillop vdd 0#28 vdd 0#2 illop[31:0] buffer 

*Mem[0x80000008] = BR(interrupt_handler)
Xxdr vdd 0#27 vdd 0#3 xadr[31:0] buffer     

*interrupts
XirqA ia[31] usermode inverter
XirqB interrupt#3 xpcsel[2:0] vdd 0#2 pcsel[2:0] mux2  // pcsel to 4 (select 0x80000008 as the next pc)
XirqC irq usermode interrupt and2                      // when irq=1 and pc31=0, interrupt should occur
XirqD interrupt xwasel vdd wasel mux2                  // wasel to 1 (select XP as the register file write address)
XirqE interrupt xwerf vdd werf mux2                    // werf to 1 (write into the register file)
XirqF interrupt#2 xwdsel[1:0] 0#2 wdsel[1:0] mux2      // wdsel to 0 (select pc+4 as data to be written into reg file)
XirqG interrupt xwr 0 wr mux2  				 // wr to 0 (if interrupted instr was ST, it doesn't get to write into main memory)

                       
*tie up loose ends
Xz radata[7:0] radata[15:8] radata[23:16] radata[31:24] temp1[7:0] or4
XzZ temp1[1:0] temp1[3:2] temp1[5:4] temp1[7:6] temp2[1:0] or4
XzZz temp2[0] temp2[1] z nor2
Xcombine1 rbdata[31:0] mwd[31:0] buffer          // connect bdata from register file to memory write data
Xcombine2 id[15]#16 id[15:0] csext[31:0] buffer  // c[15:0] sign-extended


.ends